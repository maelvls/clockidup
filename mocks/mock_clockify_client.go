// Code generated by MockGen. DO NOT EDIT.
// Source: ../timentries.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	clockify "github.com/maelvls/clockidup/clockify"
)

// MockclockifyClient is a mock of clockifyClient interface.
type MockclockifyClient struct {
	ctrl     *gomock.Controller
	recorder *MockclockifyClientMockRecorder
}

// MockclockifyClientMockRecorder is the mock recorder for MockclockifyClient.
type MockclockifyClientMockRecorder struct {
	mock *MockclockifyClient
}

// NewMockclockifyClient creates a new mock instance.
func NewMockclockifyClient(ctrl *gomock.Controller) *MockclockifyClient {
	mock := &MockclockifyClient{ctrl: ctrl}
	mock.recorder = &MockclockifyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclockifyClient) EXPECT() *MockclockifyClientMockRecorder {
	return m.recorder
}

// Projects mocks base method.
func (m *MockclockifyClient) Projects(workspaceID string) ([]clockify.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects", workspaceID)
	ret0, _ := ret[0].([]clockify.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockclockifyClientMockRecorder) Projects(workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockclockifyClient)(nil).Projects), workspaceID)
}

// Task mocks base method.
func (m *MockclockifyClient) Task(workspaceID, projectID, taskID string) (clockify.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Task", workspaceID, projectID, taskID)
	ret0, _ := ret[0].(clockify.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Task indicates an expected call of Task.
func (mr *MockclockifyClientMockRecorder) Task(workspaceID, projectID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Task", reflect.TypeOf((*MockclockifyClient)(nil).Task), workspaceID, projectID, taskID)
}

// TimeEntries mocks base method.
func (m *MockclockifyClient) TimeEntries(workspaceID, userID string, start, end time.Time) ([]clockify.TimeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeEntries", workspaceID, userID, start, end)
	ret0, _ := ret[0].([]clockify.TimeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimeEntries indicates an expected call of TimeEntries.
func (mr *MockclockifyClientMockRecorder) TimeEntries(workspaceID, userID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeEntries", reflect.TypeOf((*MockclockifyClient)(nil).TimeEntries), workspaceID, userID, start, end)
}

// Workspaces mocks base method.
func (m *MockclockifyClient) Workspaces() ([]clockify.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workspaces")
	ret0, _ := ret[0].([]clockify.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Workspaces indicates an expected call of Workspaces.
func (mr *MockclockifyClientMockRecorder) Workspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workspaces", reflect.TypeOf((*MockclockifyClient)(nil).Workspaces))
}
