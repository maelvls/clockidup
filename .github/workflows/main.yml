name: CI

on:
  pull_request:
  push:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16.x
      - run: go vet ./...
      - run: go test ./... -v -covermode=count -coverprofile=coverage.out
      - run: |
          go install golang.org/x/tools/cmd/cover@latest
          go install github.com/mattn/goveralls@latest
          goveralls -coverprofile=coverage.out -service=github-actions -repotoken $COVERALLS_TOKEN
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

      # Only store binaries to Github Releases on tag. The release process looks
      # like this:
      #  1. Create and push a tag "v0.5.0". Unfortunately, that can't be done
      #     using the GitHub Release UI, it must be done through the
      #     command-line.
      #  2. A draft GitHub Release is created. Since it is a draft, the
      #     subscribers to the clockidup GitHub Releases are not told that there
      #     is a new release yet.
      #  3. Add the release notes inside the description of the GitHub Release
      #     draft.
      #  4. Click "Publish". This time, subscribers receive a notification by
      #     email.
      - id: git_info
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=tag::"$(echo ${{ github.ref }} | sed s@refs/tags/@@)"

      - id: build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/clockidup-linux-amd64 -ldflags="-X main.version=$VERSION" .
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o build/clockidup-darwin-amd64 -ldflags="-X main.version=$VERSION" .
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o build/clockidup-darwin-arm64 -ldflags="-X main.version=$VERSION" .
          (cd build; sha256sum * | tee checksums.txt)
          echo ::set-output name=files::"$(find build/ -type f | sed -z 's/\n/%0A/g')"
        # The ::set-output mangles newlines, so we need to convert newlines into
        # %0A, which GitHub Actions then decodes when the variable is used.
        # https://github.community/t/set-output-truncates-multiline-strings/16852
        # https://unix.stackexchange.com/questions/114943/can-sed-replace-new-line-characters
        env:
          VERSION: ${{ steps.git_info.outputs.tag }}

      - if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.files }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

$HOME/gopath/bin/goveralls -coverprofile=coverage.out -service=travis-ci -repotoken $COVERALLS_TOKEN